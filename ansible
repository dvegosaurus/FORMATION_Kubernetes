-- Declaratif vs Imperatif
    - Declaratif : on verifie si la condition est rempli :
        - si oui : on fait rien
        - si non on agit
        - c'est idempotent
    - Imperatif :
        - on fait quoi qu'il arrive

-- comme powershell :
    - module officiel, communautaire
    - a boire et a manger

-- agentless !
    - passe par :
        - SSH
        - WinRM
        - Docker (protocole spécifique)
    - la conf doit donc etre faite sur les client (c.f. WinRM quickconfig)

-- écrit en python :
    - les modules sont poussé vers les clients
    - interpréteur Python p-e nécessaire sur les clients

-- attention !
    - Les modules dépendent de la version
    - Du coup parfois ca casse quand on monte de version

-- préferer l'install par pip (python)
    - permet de choisir la version

-- Modules :
    - module facts -> collecte d'infos
    - /usr/lib/python2.7/site-packages/ansible/modules
    - comme DSC param mandatory et optionnal

-- Inventaire :
    - fichier qui liste les machines géré par ansible 
        - IP ou Hostname

-- Utilise Jinja2

#### commands :
-- list module :
    - ansible-doc -l | wc -l
        - counte les modeles
    - ansible-doc -l
        - liste les modèles
    - ansible-doc -l | grep facts

-- ping :
    - ansible -i 192.168.154.110 -m ping 192.168.154.110
    - le -i permet de communiquer avec une machine hors inventaire
    - tente une co ssh, permet de valider si le host est "pilotable"
    - result :
        ansible -i 192.168.145.167, -u orange -k -m ping 192.168.145.167
        SSH password: 
        192.168.145.167 | SUCCESS => {
            "ansible_facts": {
                "discovered_interpreter_python": "/usr/bin/python3"
            }, 
            "changed": false, 
            "ping": "pong"
        }

-- voir l'inventaire :
    -- ansible-inventory --graph --vars
        - results :
        @all:
        |--@ubuntu:
        |  |--ubudesk
        |  |  |--{ansible_host = 192.168.145.190}
        |  |  |--{ansible_user = orange}
        |  |--ubuserver
        |  |  |--{ansible_host = 192.168.145.167}
        |  |  |--{ansible_user = orange}
        |--@ungrouped:
        |  |--centosmin
        |  |  |--{ansible_host = 192.168.145.110}
        |  |  |--{ansible_user = orange}

-- gather facts :
    - configurable dans un playbook
    - utilise le module setup
    - Ansible -m setup -a 'filter=ansible_os_fa*'  all
    - Ansible -m setup | grep ansible_os

-- limiter les cibles:
    - par nom de machine :
        - ansible-playbook Apache_Up.yml --limit centosmin
    - par fichier :
        - ansible-playbook Apache_Up.yml --limit @<fichier>

#### Unix Divers :
-- configurer le sudo sans MdP 
    - creer un fichier dans /etc/sudoers.d 
    - ajouter la conf (prendre en reference /etc/sudoers)
        - <username> ALL=(ALL:ALL) NOPASSWD: ALL
-- push ssh key :
    - ssh-copy-id <user>@<ip>
    - ssh-copy-id root@192.168.145.200

-- variable temporaire :
    - <variable>=<value> <commande>
    - LANG=en man ls
    - DISPLAY_SKIPPED_HOSTS=false ansible-playbook Apache_Down.yml 

-- yum :
    - yum list
    - yum grouplist









